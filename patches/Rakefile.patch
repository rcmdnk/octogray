--- Rakefile	2014-01-31 02:15:45.000000000 +0100
+++ .themes/octogray/Rakefile	2014-01-31 02:11:22.000000000 +0100
@@ -9,28 +9,29 @@
 document_root  = "~/website.com/"
 rsync_delete   = false
 rsync_args     = ""  # Any extra arguments to pass to rsync
-deploy_default = "rsync"
+#deploy_default = "push"
+deploy_ex      = "push_ex"
 
-# This will be configured for you when you run config_deploy
-deploy_branch  = "gh-pages"
+# This will be used for deploy
+deploy_url     = "git@github.com:user/user.github.io"
+deploy_branch  = "master"
 
 ## -- Misc Configs -- ##
 
-public_dir      = "public"    # compiled site directory
+tmp_dir         = File.expand_path(".") + "/"  # temporary directory for public/deploy
+#tmp_dir         = File.expand_path("~/tmp/octopress/") + "/"  # temporary directory for public/deploy
+public_dir      = "#{tmp_dir}public"  # compiled site directory
 source_dir      = "source"    # source file directory
 blog_index_dir  = 'source'    # directory for your blog's index page (if you put your index in source/blog/index.html, set this to 'source/blog')
-deploy_dir      = "_deploy"   # deploy directory (for Github pages deployment)
+deploy_dir      = "#{tmp_dir}_deploy" # deploy directory (for Github pages deployment)
 stash_dir       = "_stash"    # directory to stash posts for speedy generation
 posts_dir       = "_posts"    # directory for blog files
 themes_dir      = ".themes"   # directory for blog files
-new_post_ext    = "markdown"  # default new post file extension when using the new_post task
-new_page_ext    = "markdown"  # default new page file extension when using the new_page task
+new_post_ext    = "md"        # default new post file extension when using the new_post task
+new_page_ext    = "md"        # default new page file extension when using the new_page task
 server_port     = "4000"      # port for preview server eg. localhost:4000
 
-if (/cygwin|mswin|mingw|bccwin|wince|emx/ =~ RUBY_PLATFORM) != nil
-  puts '## Set the codepage to 65001 for Windows machines'
-  `chcp 65001`
-end
+full_stash_dir  = "#{source_dir}/#{stash_dir}"    # full path for stash dir
 
 desc "Initial setup for Octopress: copies the default theme into the path of Jekyll's generator. Rake install defaults to rake install[classic] to install a different theme run rake install[some_theme_name]"
 task :install, :theme do |t, args|
@@ -52,12 +53,67 @@
 # Working with Jekyll #
 #######################
 
+desc "Update stylesheets"
+task :css do
+  raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
+  puts "## Update stylesheets"
+  system "compass compile --css-dir #{source_dir}/stylesheets"
+  cp_r "#{source_dir}/stylesheets/.", "#{public_dir}/stylesheets/"
+end
+
 desc "Generate jekyll site"
 task :generate do
   raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
   puts "## Generating Site with Jekyll"
   system "compass compile --css-dir #{source_dir}/stylesheets"
   system "jekyll"
+  system "rm -f .integrated"
+end
+
+desc "Same as generate"
+task :gen do
+  Rake::Task[:generate].execute
+end
+
+# usage rake generate_only[my-post]
+desc "Generate only the specified post (much faster)"
+task :generate_only, :filename do |t, args|
+  raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
+  if args.filename
+    filename = args.filename
+  else
+    filename = Dir.glob("#{source_dir}/#{posts_dir}/*.#{new_post_ext}").sort_by{|f| File.mtime(f)}.reverse[0]
+  end
+  puts ""
+  puts "## Test build for #{filename}"
+  puts ""
+  puts "## Stashing other posts"
+  Rake::Task[:isolate].invoke(filename)
+  puts "## Generating Site with Jekyll"
+  system "compass compile --css-dir #{source_dir}/stylesheets"
+  system({"OCTOPRESS_ENV"=>"preview"},"jekyll")
+  puts "## Restoring stashed posts"
+  Rake::Task[:integrate].execute
+end
+
+desc "Same as generate_only"
+task :gen_only, :filename do |t, args|
+  if args.filename
+    filename = args.filename
+  else
+    filename = Dir.glob("#{source_dir}/#{posts_dir}/*.#{new_post_ext}").sort_by{|f| File.mtime(f)}.reverse[0]
+  end
+  Rake::Task[:generate_only].invoke(filename)
+end
+
+desc "Same as generate_only"
+task :go, :filename do |t, args|
+  if args.filename
+    filename = args.filename
+  else
+    filename = Dir.glob("#{source_dir}/#{posts_dir}/*.#{new_post_ext}").sort_by{|f| File.mtime(f)}.reverse[0]
+  end
+  Rake::Task[:generate_only].invoke(filename)
 end
 
 desc "Watch the site and regenerate when it changes"
@@ -76,6 +132,37 @@
   [jekyllPid, compassPid].each { |pid| Process.wait(pid) }
 end
 
+# usage rake watch_only[my-post]
+desc "watch only the specified post"
+task :watch_only, :filename do |t, args|
+  raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
+
+  if args.filename
+    filename = args.filename
+  else
+    filename = Dir.glob("#{source_dir}/#{posts_dir}/*.#{new_post_ext}").sort_by{|f| File.mtime(f)}.reverse[0]
+  end
+  puts ""
+  puts "## Test for #{filename}"
+  puts ""
+  puts "## Stashing other posts"
+  Rake::Task[:isolate].invoke(filename)
+
+  puts "Starting to watch source with Jekyll and Compass."
+  system "compass compile --css-dir #{source_dir}/stylesheets" unless File.exist?("#{source_dir}/stylesheets/screen.css")
+  jekyllPid = Process.spawn({"OCTOPRESS_ENV"=>"preview"}, "jekyll --auto")
+  compassPid = Process.spawn("compass watch")
+
+  trap("INT") {
+    [jekyllPid, compassPid].each { |pid| Process.kill(9, pid) rescue Errno::ESRCH }
+    puts "## Restoring stashed posts"
+    Rake::Task[:integrate].execute
+    exit 0
+  }
+
+  [jekyllPid, compassPid].each { |pid| Process.wait(pid) }
+end
+
 desc "preview the site in a web browser"
 task :preview do
   raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
@@ -93,6 +180,40 @@
   [jekyllPid, compassPid, rackupPid].each { |pid| Process.wait(pid) }
 end
 
+# usage rake preview_only[my-post]
+desc "preview only the specified post"
+task :preview_only, :filename do |t, args|
+  raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
+
+  if args.filename
+    filename = args.filename
+  else
+    filename = Dir.glob("#{source_dir}/#{posts_dir}/*.#{new_post_ext}").sort_by{|f| File.mtime(f)}.reverse[0]
+  end
+  puts ""
+  puts "## Test for #{filename}"
+  puts ""
+  puts "## Stashing other posts"
+  Rake::Task[:isolate].invoke(filename)
+
+  puts "## Starting to watch source with Jekyll and Compass. Starting Rack on port #{server_port}"
+  system "compass compile --css-dir #{source_dir}/stylesheets" unless File.exist?("#{source_dir}/stylesheets/screen.css")
+  jekyllPid = Process.spawn({"OCTOPRESS_ENV"=>"preview"}, "jekyll --auto")
+  compassPid = Process.spawn("compass watch")
+  rackupPid = Process.spawn("rackup --port #{server_port}")
+
+  trap("INT") {
+    [jekyllPid, compassPid, rackupPid].each { |pid| Process.kill(9, pid) rescue Errno::ESRCH }
+    puts "## Restoring stashed posts"
+    Rake::Task[:integrate].execute
+    exit 0
+  }
+
+  [jekyllPid, compassPid, rackupPid].each { |pid| Process.wait(pid) }
+
+end
+
+
 # usage rake new_post[my-new-post] or rake new_post['my new post'] or rake new_post (defaults to "new-post")
 desc "Begin a new post in #{source_dir}/#{posts_dir}"
 task :new_post, :title do |t, args|
@@ -102,20 +223,45 @@
     title = get_stdin("Enter a title for your post: ")
   end
   raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
+  #title_words = title.split(' ')
+  #tags = title_words
+  #category = tags.shift
   mkdir_p "#{source_dir}/#{posts_dir}"
   filename = "#{source_dir}/#{posts_dir}/#{Time.now.strftime('%Y-%m-%d')}-#{title.to_url}.#{new_post_ext}"
   if File.exist?(filename)
     abort("rake aborted!") if ask("#{filename} already exists. Do you want to overwrite?", ['y', 'n']) == 'n'
   end
+  # Change title (make it for tags for some posting sites)
+  #title_tags = "\##{tags.join(' #')}"
   puts "Creating new post: #{filename}"
   open(filename, 'w') do |post|
     post.puts "---"
     post.puts "layout: post"
     post.puts "title: \"#{title.gsub(/&/,'&amp;')}\""
-    post.puts "date: #{Time.now.strftime('%Y-%m-%d %H:%M:%S %z')}"
+    #post.puts "title: \"#{title_tags}\""
+    post.puts "date: #{Time.now.strftime('%Y-%m-%d %H:%M')}"
     post.puts "comments: true"
-    post.puts "categories: "
+    #post.puts "category: #{category}"
+    #post.puts "tags: #{tags}"
+    #post.puts "keywords: #{title.gsub(' ',', ')}"
+    #post.puts "description: "
+    post.puts "ogimage:"
+    post.puts "published: false"
+    post.puts ""
     post.puts "---"
+    post.puts ""
+    post.puts "<!-- more -->"
+    post.puts "{%include after_excerpt.html%}"
+    post.puts ""
+    post.puts ""
+    post.puts ""
+    post.puts "{%comment%}"
+    post.puts "![xxxxx]({{site.imgpath}}/post/xxxxx){:class=\"pic\"}"
+    post.puts "<i class=\"fa fa-arrow-right\"></i>"
+    post.puts "<hr class=\"dotted-border\">"
+    post.puts "{%endcomment%}"
+    post.puts ""
+    post.puts "{%include custom/endofcontent.html%}"
   end
 end
 
@@ -125,8 +271,10 @@
   raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
   args.with_defaults(:filename => 'new-page')
   page_dir = [source_dir]
+  site_config = YAML.load(IO.read('_config.yml'))
+  author = site_config['author']
   if args.filename.downcase =~ /(^.+\/)?(.+)/
-    filename, dot, extension = $2.rpartition('.').reject(&:empty?)         # Get filename and extension
+    filename, extension = $2.rpartition('.').reject(&:empty?)         # Get filename and etension
     title = filename
     page_dir.concat($1.downcase.sub(/^\//, '').split('/')) unless $1.nil?  # Add path to page_dir Array
     if extension.nil?
@@ -147,10 +295,12 @@
       page.puts "---"
       page.puts "layout: page"
       page.puts "title: \"#{title}\""
+      page.puts "author: \"#{author}\""
       page.puts "date: #{Time.now.strftime('%Y-%m-%d %H:%M')}"
       page.puts "comments: true"
       page.puts "sharing: true"
       page.puts "footer: true"
+      page.puts "published: false"
       page.puts "---"
     end
   else
@@ -161,21 +311,23 @@
 # usage rake isolate[my-post]
 desc "Move all other posts than the one currently being worked on to a temporary stash location (stash) so regenerating the site happens much more quickly."
 task :isolate, :filename do |t, args|
-  stash_dir = "#{source_dir}/#{stash_dir}"
-  FileUtils.mkdir(stash_dir) unless File.exist?(stash_dir)
-  Dir.glob("#{source_dir}/#{posts_dir}/*.*") do |post|
-    FileUtils.mv post, stash_dir unless post.include?(args.filename)
+  FileUtils.mkdir(full_stash_dir) unless File.exist?(full_stash_dir)
+  Dir.glob("#{source_dir}/#{posts_dir}/*") do |post|
+    FileUtils.mv post, full_stash_dir unless post.include?(args.filename)
   end
+  system "touch .isolated"
 end
 
 desc "Move all stashed posts back into the posts directory, ready for site generation."
 task :integrate do
-  FileUtils.mv Dir.glob("#{source_dir}/#{stash_dir}/*.*"), "#{source_dir}/#{posts_dir}/"
+  FileUtils.mv Dir.glob("#{full_stash_dir}/*"), "#{source_dir}/#{posts_dir}/"
+  system "rm -f .isolated"
+  system "touch .integrated"
 end
 
 desc "Clean out caches: .pygments-cache, .gist-cache, .sass-cache"
 task :clean do
-  rm_rf [".pygments-cache/**", ".gist-cache/**", ".sass-cache/**", "source/stylesheets/screen.css"]
+  [".pygments-cache/**", ".gist-cache/**", ".sass-cache/**", "source/stylesheets/screen.css"].each { |dir| rm_rf Dir.glob(dir) }
 end
 
 desc "Move sass to sass.old, install sass theme updates, replace sass/custom with sass.old/custom"
@@ -188,7 +340,7 @@
   mv "sass", "sass.old"
   puts "## Moved styles into sass.old/"
   cp_r "#{themes_dir}/"+theme+"/sass/", "sass"
-  cp_r "sass/custom/.", "sass.old/custom"
+  cp_r "sass.old/custom/.", "sass/custom"
   puts "## Updated Sass ##"
 end
 
@@ -213,7 +365,6 @@
 ##############
 # Deploying  #
 ##############
-
 desc "Default deploy task"
 task :deploy do
   # Check if preview posts exist, which should not be published
@@ -222,15 +373,33 @@
     File.delete(".preview-mode")
     Rake::Task[:generate].execute
   end
+  if File.exists?(".integrated") or File.exists?(".isolated")
+    puts "## Found isolated history, regenerating files ..."
+    system "rm -f .integrated .isolated"
+    Rake::Task[:integrate].execute
+    Rake::Task[:generate].execute
+  end
 
   Rake::Task[:copydot].invoke(source_dir, public_dir)
-  Rake::Task["#{deploy_default}"].execute
+
+  # Check if files are fine or not
+  ok_failed_stop system("if [ -f ~/.gitavoid ];then while read a;do if ret=`grep -i -r -q $a #{public_dir}`;then echo \"avoid word $a is included!!!\"; echo $ret; exit 1;fi; done < ~/.gitavoid;else  echo \"WARNING: There is no ~/.gitavoid file!!!\";fi")
+
+  Rake::Task["#{deploy_ex}"].execute
+
+  Rake::Task[:superfeedr].execute
+  Rake::Task[:ping].execute
 end
 
 desc "Generate website and deploy"
 task :gen_deploy => [:integrate, :generate, :deploy] do
 end
 
+desc "Same as gen_deploy"
+task :gd => [:integrate, :generate, :deploy] do
+end
+
+
 desc "copy dot files for deployment"
 task :copydot, :source, :dest do |t, args|
   FileList["#{args.source}/**/.*"].exclude("**/.", "**/..", "**/.DS_Store", "**/._*").each do |file|
@@ -261,7 +430,7 @@
   cp_r "#{public_dir}/.", deploy_dir
   cd "#{deploy_dir}" do
     system "git add -A"
-    puts "\n## Committing: Site updated at #{Time.now.utc}"
+    puts "\n## Commiting: Site updated at #{Time.now.utc}"
     message = "Site updated at #{Time.now.utc}"
     system "git commit -m \"#{message}\""
     puts "\n## Pushing generated #{deploy_dir} website"
@@ -270,6 +439,31 @@
   end
 end
 
+desc "deploy public directory to github pages through temporary deploy dir"
+multitask :push_ex do
+  puts "## Deploying branch to Github Pages "
+  puts "## clone from ${deploy_url}"
+  rm_rf deploy_dir
+  mkdir_p deploy_dir
+  cd "#{deploy_dir}" do
+    system "git init"
+    system "git remote add origin #{deploy_url}"
+  end
+
+  Rake::Task[:copydot].invoke(public_dir, deploy_dir)
+  puts "\n## Copying #{public_dir} to #{deploy_dir}"
+  cp_r "#{public_dir}/.", deploy_dir
+  cd "#{deploy_dir}" do
+    system "git add -A"
+    puts "\n## Commiting: Site updated at #{Time.now.utc}"
+    message = "Site updated at #{Time.now.utc}"
+    system "git commit -m \"#{message}\" >/dev/null"
+    puts "\n## Pushing generated #{deploy_dir} website"
+    system "git push -f origin #{deploy_branch}"
+    puts "\n## Github Pages deploy complete"
+  end
+end
+
 desc "Update configurations to support publishing to root or sub directory"
 task :set_root_dir, :dir do |t, args|
   puts ">>> !! Please provide a directory, eg. rake config_dir[publishing/subdirectory]" unless args.dir
@@ -309,6 +503,8 @@
 task :setup_github_pages, :repo do |t, args|
   if args.repo
     repo_url = args.repo
+  elsif deploy_url
+    repo_url = deploy_url
   else
     puts "Enter the read/write url for your repository"
     puts "(For example, 'git@github.com:your_username/your_username.github.io.git)"
@@ -402,3 +598,39 @@
   puts "Tasks: #{(Rake::Task.tasks - [Rake::Task[:list]]).join(', ')}"
   puts "(type rake -T for more detail)\n\n"
 end
+
+desc 'send to Superfeedr'
+task :superfeedr do
+  #require 'net/http'
+  #require 'uri'
+  #hub_url = "http://yoursite.superfeedr.com" # <--- replace this with your hub
+  #atom_url = "http://yoursite.github.io/atom.xml" # <--- replace this with your full feed url
+  #resp, data = Net::HTTP.post_form(URI.parse(hub_url),
+  #    {'hub.mode' => 'publish',
+  #    'hub.url' => atom_url})
+  #raise "!! Hub notification error: #{resp.code} #{resp.msg}, #{data}" unless resp.code == "204"
+  #puts "## Notified hub (" + hub_url + ") that feed #{atom_url} has been updated"
+end
+
+#-- sending ping --#
+desc "Sedning ping to Web Search Engines"
+task :ping do
+  require "yaml"
+  require "xmlrpc/client"
+
+  site_config = YAML.load(IO.read('_config.yml'))
+  blog_title = site_config['title']
+  blog_url = site_config['url']
+  ping_url = YAML.load(IO.read('ping.yml'))
+  ping_url.each do |url|
+    ping = XMLRPC::Client.new2(url)
+    begin
+      result = ping.call('weblogUpdates.ping', blog_title, blog_url)
+      puts "#{url} : #{result}"
+    rescue => e
+      puts "#{url} : #{e}"
+    end
+  end
+end
+
+
