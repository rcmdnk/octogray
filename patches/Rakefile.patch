diff --git a/master:Rakefile b/source:Rakefile
index 81a03df..89d036b 100644
--- a/master:Rakefile
+++ b/source:Rakefile
@@ -9,27 +9,32 @@ ssh_port       = "22"
 document_root  = "~/website.com/"
 rsync_delete   = false
 rsync_args     = ""  # Any extra arguments to pass to rsync
-deploy_default = "rsync"
+deploy_default = "push_ex"
 
 # This will be configured for you when you run config_deploy
-deploy_branch  = "gh-pages"
+deploy_branch  = "master"
+repo_url       = "git@github.com:user/user.github.io.git"
 
 ## -- Misc Configs -- ##
 
-public_dir      = "public"    # compiled site directory
+tmp_dir         = File.expand_path(".") + "/"  # temporary directory for public/deploy
+public_dir      = "#{tmp_dir}public"  # compiled site directory
 source_dir      = "source"    # source file directory
 blog_index_dir  = 'source'    # directory for your blog's index page (if you put your index in source/blog/index.html, set this to 'source/blog')
-deploy_dir      = "_deploy"   # deploy directory (for Github pages deployment)
+deploy_dir      = "#{tmp_dir}_deploy" # deploy directory (for Github pages deployment)
 stash_dir       = "_stash"    # directory to stash posts for speedy generation
+full_stash_dir  = "#{source_dir}/#{stash_dir}"    # full path for stash dir
 posts_dir       = "_posts"    # directory for blog files
 themes_dir      = ".themes"   # directory for blog files
 new_post_ext    = "markdown"  # default new post file extension when using the new_post task
 new_page_ext    = "markdown"  # default new page file extension when using the new_page task
 server_port     = "4000"      # port for preview server eg. localhost:4000
+word_avoid      = "~/.gitavoid"  # words which must be avoided to be published
+ping_file       = "ping.yml"  # file of site list for ping
 
 if (/cygwin|mswin|mingw|bccwin|wince|emx/ =~ RUBY_PLATFORM) != nil
   puts '## Set the codepage to 65001 for Windows machines'
-  `chcp 65001`
+  `chcp.com 65001`
 end
 
 desc "Initial setup for Octopress: copies the default theme into the path of Jekyll's generator. Rake install defaults to rake install[classic] to install a different theme run rake install[some_theme_name]"
@@ -52,12 +57,71 @@ end
 # Working with Jekyll #
 #######################
 
+desc "Update stylesheets"
+task :css do
+  raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
+  puts "## Update stylesheets"
+  system "compass compile --css-dir #{source_dir}/stylesheets"
+  cp_r "#{source_dir}/stylesheets/.", "#{public_dir}/stylesheets/"
+end
+
+desc "Update stylesheets with nested style"
+task :css_nested do
+  raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
+  puts "## Update stylesheets"
+  system "compass compile -s nested --css-dir #{source_dir}/stylesheets"
+  cp_r "#{source_dir}/stylesheets/.", "#{public_dir}/stylesheets/"
+end
+
 desc "Generate jekyll site"
 task :generate do
   raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
+  Rake::Task[:check].invoke("new")
   puts "## Generating Site with Jekyll"
   system "compass compile --css-dir #{source_dir}/stylesheets"
   system "jekyll build"
+  system "rm -f .integrated"
+end
+
+desc "Same as generate"
+task :gen => :generate
+
+# usage rake generate_only[my-post]
+desc "Generate only specified post (much faster)"
+task :generate_only, :filename do |t, args|
+  raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
+  if args.filename
+    filename = args.filename
+  else
+    filename = Dir.glob("#{source_dir}/#{posts_dir}/*.#{new_post_ext}").sort_by{|f| File.mtime(f)}.reverse[0]
+  end
+  puts ""
+  puts "## Test build for #{filename}"
+  puts ""
+  puts "## Stashing other posts"
+  Rake::Task[:isolate].invoke(filename)
+  begin
+    Rake::Task[:check].invoke("new")
+    puts "## Generating Site with Jekyll"
+    system "compass compile --css-dir #{source_dir}/stylesheets"
+    system({"OCTOPRESS_ENV"=>"preview"},"jekyll build --unpublished")
+    puts "## Restoring stashed posts"
+    Rake::Task[:integrate].execute
+  rescue
+    puts $!
+    Rake::Task[:integrate].execute
+    exit 1
+  end
+end
+
+desc "Same as generate_only"
+task :gen_only, :filename do |t, args|
+  Rake::Task[:generate_only].invoke(args.filename)
+end
+
+desc "Same as generate_only"
+task :go, :filename do |t, args|
+  Rake::Task[:generate_only].invoke(args.filename)
 end
 
 desc "Watch the site and regenerate when it changes"
@@ -65,7 +129,7 @@ task :watch do
   raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
   puts "Starting to watch source with Jekyll and Compass."
   system "compass compile --css-dir #{source_dir}/stylesheets" unless File.exist?("#{source_dir}/stylesheets/screen.css")
-  jekyllPid = Process.spawn({"OCTOPRESS_ENV"=>"preview"}, "jekyll build --watch")
+  jekyllPid = Process.spawn({"OCTOPRESS_ENV"=>"preview"}, "jekyll build --watch --unpublished")
   compassPid = Process.spawn("compass watch")
 
   trap("INT") {
@@ -76,12 +140,49 @@ task :watch do
   [jekyllPid, compassPid].each { |pid| Process.wait(pid) }
 end
 
+# usage rake watch_only[my-post]
+desc "watch only specified post"
+task :watch_only, :filename do |t, args|
+  raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
+
+  if args.filename
+    filename = args.filename
+  else
+    filename = Dir.glob("#{source_dir}/#{posts_dir}/*.#{new_post_ext}").sort_by{|f| File.mtime(f)}.reverse[0]
+  end
+  puts ""
+  puts "## Test for #{filename}"
+  puts ""
+  puts "## Stashing other posts"
+  Rake::Task[:isolate].invoke(filename)
+
+  begin
+    puts "Starting to watch source with Jekyll and Compass."
+    system "compass compile --css-dir #{source_dir}/stylesheets" unless File.exist?("#{source_dir}/stylesheets/screen.css")
+    jekyllPid = Process.spawn({"OCTOPRESS_ENV"=>"preview"}, "jekyll build --watch --unpublished")
+    compassPid = Process.spawn("compass watch")
+
+    trap("INT") {
+      [jekyllPid, compassPid].each { |pid| Process.kill(9, pid) rescue Errno::ESRCH }
+      puts "## Restoring stashed posts"
+      Rake::Task[:integrate].execute
+      exit 0
+    }
+
+    [jekyllPid, compassPid].each { |pid| Process.wait(pid) }
+  rescue
+    puts $1
+    Rake::Task[:integrate].execute
+    exit 1
+  end
+end
+
 desc "preview the site in a web browser"
 task :preview do
   raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
   puts "Starting to watch source with Jekyll and Compass. Starting Rack on port #{server_port}"
   system "compass compile --css-dir #{source_dir}/stylesheets" unless File.exist?("#{source_dir}/stylesheets/screen.css")
-  jekyllPid = Process.spawn({"OCTOPRESS_ENV"=>"preview"}, "jekyll build --watch")
+  jekyllPid = Process.spawn({"OCTOPRESS_ENV"=>"preview"}, "jekyll build --watch --unpublished")
   compassPid = Process.spawn("compass watch")
   rackupPid = Process.spawn("rackup --port #{server_port}")
 
@@ -93,6 +194,45 @@ task :preview do
   [jekyllPid, compassPid, rackupPid].each { |pid| Process.wait(pid) }
 end
 
+# usage rake preview_only[my-post]
+desc "preview only specified post"
+task :preview_only, :filename do |t, args|
+  raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
+
+  if args.filename
+    filename = args.filename
+  else
+    filename = Dir.glob("#{source_dir}/#{posts_dir}/*.#{new_post_ext}").sort_by{|f| File.mtime(f)}.reverse[0]
+  end
+  puts ""
+  puts "## Test for #{filename}"
+  puts ""
+  puts "## Stashing other posts"
+  Rake::Task[:isolate].invoke(filename)
+
+  begin
+    puts "## Starting to watch source with Jekyll and Compass. Starting Rack on port #{server_port}"
+    system "compass compile --css-dir #{source_dir}/stylesheets" unless File.exist?("#{source_dir}/stylesheets/screen.css")
+    jekyllPid = Process.spawn({"OCTOPRESS_ENV"=>"preview"}, "jekyll build --watch --unpublished")
+    compassPid = Process.spawn("compass watch")
+    rackupPid = Process.spawn("rackup --port #{server_port}")
+
+    trap("INT") {
+      [jekyllPid, compassPid, rackupPid].each { |pid| Process.kill(9, pid) rescue Errno::ESRCH }
+      puts "## Restoring stashed posts"
+      Rake::Task[:integrate].execute
+      exit 0
+    }
+
+    [jekyllPid, compassPid, rackupPid].each { |pid| Process.wait(pid) }
+  rescue
+    puts $1
+    Rake::Task[:integrate].execute
+    exit 1
+  end
+end
+
+
 # usage rake new_post[my-new-post] or rake new_post['my new post'] or rake new_post (defaults to "new-post")
 desc "Begin a new post in #{source_dir}/#{posts_dir}"
 task :new_post, :title do |t, args|
@@ -102,20 +242,47 @@ task :new_post, :title do |t, args|
     title = get_stdin("Enter a title for your post: ")
   end
   raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
+  #title_words = title.split(' ')
+  #tags = title_words
+  #category = tags.shift
   mkdir_p "#{source_dir}/#{posts_dir}"
   filename = "#{source_dir}/#{posts_dir}/#{Time.now.strftime('%Y-%m-%d')}-#{title.to_url}.#{new_post_ext}"
   if File.exist?(filename)
     abort("rake aborted!") if ask("#{filename} already exists. Do you want to overwrite?", ['y', 'n']) == 'n'
   end
+  # Change title (make it for tags for some posting sites)
+  #title_tags = "\##{tags.join(' #')}"
   puts "Creating new post: #{filename}"
   open(filename, 'w') do |post|
     post.puts "---"
     post.puts "layout: post"
     post.puts "title: \"#{title.gsub(/&/,'&amp;')}\""
+    #post.puts "title: \"#{title_tags}\""
     post.puts "date: #{Time.now.strftime('%Y-%m-%d %H:%M:%S %z')}"
     post.puts "comments: true"
-    post.puts "categories: "
+    post.puts "categories:"
+    post.puts "tags:"
+    #post.puts "categories: #{category}"
+    #post.puts "tags: #{tags}"
+    #post.puts "keywords: #{title.gsub(' ',', ')}"
+    #post.puts "description: "
+    post.puts "ogimage:"
+    post.puts "published: false"
+    post.puts ""
     post.puts "---"
+    post.puts ""
+    post.puts "<!-- more -->"
+    post.puts "{%include after_excerpt.html%}"
+    post.puts ""
+    post.puts ""
+    post.puts ""
+    post.puts "{%comment%}"
+    post.puts "![xxxxx]({{site.imgpath}}/post/xxxxx){:class=\"pic\"}"
+    post.puts "<i class=\"fa fa-arrow-right\"></i>"
+    post.puts "<hr class=\"dotted-border\">"
+    post.puts "{%endcomment%}"
+    post.puts ""
+    post.puts "{%include custom/endofcontent.html%}"
   end
 end
 
@@ -125,6 +292,8 @@ task :new_page, :filename do |t, args|
   raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
   args.with_defaults(:filename => 'new-page')
   page_dir = [source_dir]
+  site_config = YAML.load(IO.read('_config.yml'))
+  author = site_config['author']
   if args.filename.downcase =~ /(^.+\/)?(.+)/
     filename, dot, extension = $2.rpartition('.').reject(&:empty?)         # Get filename and extension
     title = filename
@@ -147,10 +316,12 @@ task :new_page, :filename do |t, args|
       page.puts "---"
       page.puts "layout: page"
       page.puts "title: \"#{title}\""
+      page.puts "author: \"#{author}\""
       page.puts "date: #{Time.now.strftime('%Y-%m-%d %H:%M')}"
       page.puts "comments: true"
       page.puts "sharing: true"
       page.puts "footer: true"
+      page.puts "published: false"
       page.puts "---"
     end
   else
@@ -161,21 +332,23 @@ end
 # usage rake isolate[my-post]
 desc "Move all other posts than the one currently being worked on to a temporary stash location (stash) so regenerating the site happens much more quickly."
 task :isolate, :filename do |t, args|
-  stash_dir = "#{source_dir}/#{stash_dir}"
-  FileUtils.mkdir(stash_dir) unless File.exist?(stash_dir)
-  Dir.glob("#{source_dir}/#{posts_dir}/*.*") do |post|
-    FileUtils.mv post, stash_dir unless post.include?(args.filename)
+  FileUtils.mkdir(full_stash_dir) unless File.exist?(full_stash_dir)
+  Dir.glob("#{source_dir}/#{posts_dir}/*") do |post|
+    FileUtils.mv post, full_stash_dir unless post.end_with?(args.filename)
   end
+  system "touch .isolated"
 end
 
 desc "Move all stashed posts back into the posts directory, ready for site generation."
 task :integrate do
-  FileUtils.mv Dir.glob("#{source_dir}/#{stash_dir}/*.*"), "#{source_dir}/#{posts_dir}/"
+  FileUtils.mv Dir.glob("#{full_stash_dir}/*"), "#{source_dir}/#{posts_dir}/"
+  system "rm -f .isolated"
+  system "touch .integrated"
 end
 
 desc "Clean out caches: .pygments-cache, .gist-cache, .sass-cache"
 task :clean do
-  rm_rf [".pygments-cache/**", ".gist-cache/**", ".sass-cache/**", "source/stylesheets/screen.css"]
+  [".pygments-cache/**", ".gist-cache/**", ".sass-cache/**", "source/stylesheets/**"].each { |dir| rm_rf Dir.glob(dir) }
 end
 
 desc "Move sass to sass.old, install sass theme updates, replace sass/custom with sass.old/custom"
@@ -222,14 +395,29 @@ task :deploy do
     File.delete(".preview-mode")
     Rake::Task[:generate].execute
   end
+  if File.exists?(".integrated") or File.exists?(".isolated")
+    puts "## Found isolated history, regenerating files ..."
+    system "rm -f .integrated .isolated"
+    Rake::Task[:integrate].execute
+    Rake::Task[:generate].execute
+  end
 
   Rake::Task[:copydot].invoke(source_dir, public_dir)
+
+  # Check if files are fine or not
+  ok_failed_stop system("if [ -f #{word_avoid} ];then while read a;do if ret=`grep -i -r -q $a #{public_dir}`;then echo \"A word $a is included, must be avoided!!!\"; echo $ret; exit 1;fi; done < #{word_avoid};fi")
+
   Rake::Task["#{deploy_default}"].execute
+
+  Rake::Task[:ping].execute
+  Rake::Task[:superfeedr].execute
 end
 
 desc "Generate website and deploy"
-task :gen_deploy => [:integrate, :generate, :deploy] do
-end
+task :gen_deploy => [:integrate, :generate, :deploy]
+
+desc "Same as gen_deploy"
+task :gd => [:integrate, :generate, :deploy]
 
 desc "copy dot files for deployment"
 task :copydot, :source, :dest do |t, args|
@@ -253,7 +441,7 @@ multitask :push do
   puts "## Deploying branch to Github Pages "
   puts "## Pulling any updates from Github Pages "
   cd "#{deploy_dir}" do 
-    Bundler.with_clean_env { system "git pull" }
+    system "git pull"
   end
   (Dir["#{deploy_dir}/*"]).each { |f| rm_rf(f) }
   Rake::Task[:copydot].invoke(public_dir, deploy_dir)
@@ -265,7 +453,33 @@ multitask :push do
     puts "\n## Committing: #{message}"
     system "git commit -m \"#{message}\""
     puts "\n## Pushing generated #{deploy_dir} website"
-    Bundler.with_clean_env { system "git push origin #{deploy_branch}" }
+    system "git push origin #{deploy_branch}"
+    puts "\n## Github Pages deploy complete"
+  end
+end
+
+desc "deploy public directory to github pages through temporary deploy dir"
+multitask :push_ex do
+  puts "## Deploying branch to Github Pages "
+  puts "## clone from #{repo_url}"
+  rm_rf deploy_dir
+  mkdir_p deploy_dir
+  cd "#{deploy_dir}" do
+    system "git init"
+    system "git remote add origin #{repo_url}"
+  end
+
+  Rake::Task[:copydot].invoke(public_dir, deploy_dir)
+  puts "\n## Copying #{public_dir} to #{deploy_dir}"
+  cp_r "#{public_dir}/.", deploy_dir
+  cd "#{deploy_dir}" do
+    system "git add -A"
+    puts "\n## Commiting: Site updated at #{Time.now.utc}"
+    message = "Site updated at #{Time.now.utc}"
+    system "git commit -m \"#{message}\" >/dev/null"
+    system "git branch -m #{deploy_branch}" unless deploy_branch == 'master'
+    puts "\n## Pushing generated #{deploy_dir} website"
+    system "git push -f origin #{deploy_branch}"
     puts "\n## Github Pages deploy complete"
   end
 end
@@ -306,20 +520,25 @@ task :set_root_dir, :dir do |t, args|
 end
 
 desc "Set up _deploy folder and deploy branch for Github Pages deployment"
-task :setup_github_pages, :repo do |t, args|
+task :setup_github_pages, [:repo, :yes] do |t, args|
   if args.repo
     repo_url = args.repo
   else
     puts "Enter the read/write url for your repository"
     puts "(For example, 'git@github.com:your_username/your_username.github.io.git)"
-    puts "           or 'https://github.com/your_username/your_username.github.io')"
+    puts "           , 'https://github.com/your_username/repository')"
     repo_url = get_stdin("Repository url: ")
   end
   protocol = (repo_url.match(/(^git)@/).nil?) ? 'https' : 'git'
   if protocol == 'git'
     user = repo_url.match(/:([^\/]+)/)[1]
   else
-    user = repo_url.match(/github\.com\/([^\/]+)/)[1]
+    begin
+      user = repo_url.match(/github\.com\/([^\/]+)/)[1]
+    rescue
+      # In case of GH_TOKEN (https://${GH_TOKEN}@github.com:user/repo)
+      user = repo_url.match(/:([^\/]+)/)[1]
+    end
   end
   branch = (repo_url.match(/\/[\w-]+\.github\.(?:io|com)/).nil?) ? 'gh-pages' : 'master'
   project = (branch == 'gh-pages') ? repo_url.match(/\/([^\.]+)/)[1] : ''
@@ -346,23 +565,50 @@ task :setup_github_pages, :repo do |t, args|
   File.open('_config.yml', 'w') do |f|
     f.write jekyll_config
   end
-  rm_rf deploy_dir
-  mkdir deploy_dir
-  cd "#{deploy_dir}" do
-    system "git init"
-    system "echo 'My Octopress Page is coming soon &hellip;' > index.html"
-    system "git add ."
-    system "git commit -m \"Octopress init\""
-    system "git branch -m gh-pages" unless branch == 'master'
-    system "git remote add origin #{repo_url}"
-    rakefile = IO.read(__FILE__)
-    rakefile.sub!(/deploy_branch(\s*)=(\s*)(["'])[\w-]*["']/, "deploy_branch\\1=\\2\\3#{branch}\\3")
-    rakefile.sub!(/deploy_default(\s*)=(\s*)(["'])[\w-]*["']/, "deploy_default\\1=\\2\\3push\\3")
-    File.open(__FILE__, 'w') do |f|
-      f.write rakefile
+
+  rakefile = IO.read(__FILE__)
+  rakefile.sub!(/deploy_branch(\s*)=(\s*)(["'])[\w-]*["']/, "deploy_branch\\1=\\2\\3#{branch}\\3")
+  rakefile.sub!(/repo_url(\s*)=(\s*)(["'])[0-9a-zA-Z\-\_\/\@\.\:]*["']/, "repo_url\\1=\\2\\3#{repo_url}\\3")
+
+  ext = 'markdown'
+  if ask("Do you want to use 'md' extension instead of 'markdown'?", ['y', 'n'], args.yes) == "y"
+    ext = 'md'
+  end
+  rakefile.sub!(/new_post_ext(\s*)=(\s*)(["'])[\w-]*["']/, "new_post_ext\\1=\\2\\3#{ext}\\3")
+  rakefile.sub!(/new_page_ext(\s*)=(\s*)(["'])[\w-]*["']/, "new_page_ext\\1=\\2\\3#{ext}\\3")
+
+  if ask("Do you want to push_ex (renew remote repository evrey time)?", ['y', 'n'], args.yes) == 'y'
+    if yn_check(args.yes) == "y"
+      dir = ""
+    else
+      dir = get_stdin("Enter where you want to put _deploy (current: #{tmp_dir}): ")
+    end
+    if dir == ""
+      dir = tmp_dir
+    elsif
+      if dir[-1] == "/"
+        dir = dir[0..-2]
+      end
     end
+    rakefile.sub!(/deploy_default(\s*)=(\s*)(["'])[\w-]*["']/, "deploy_default\\1=\\2\\3push_ex\\3")
+    rakefile.sub!(/(tmp_dir\s*=\s*File.expand_path\()(["'])[^"']*["']/,"\\1\\2#{dir}\\2")
+  else
+    rm_rf deploy_dir
+    mkdir deploy_dir
+    cd "#{deploy_dir}" do
+      system "git init"
+      system "echo 'My Octopress Page is coming soon &hellip;' > index.html"
+      system "git add -A"
+      system "git commit -m \"Octopress init\""
+      system "git branch -m #{deploy_branch}" unless branch == 'master'
+      system "git remote add origin #{repo_url}"
+      rakefile.sub!(/deploy_default(\s*)=(\s*)(["'])[\w-]*["']/, "deploy_default\\1=\\2\\3push\\3")
+    end
+    puts "\n---\n## Now you can deploy to #{repo_url} with `rake deploy` ##"
+  end
+  File.open(__FILE__, 'w') do |f|
+    f.write rakefile
   end
-  puts "\n---\n## Now you can deploy to #{repo_url} with `rake deploy` ##"
 end
 
 def ok_failed(condition)
@@ -378,9 +624,22 @@ def get_stdin(message)
   STDIN.gets.chomp
 end
 
-def ask(message, valid_options)
+def yn_check(yn)
+  if yn == "y" or yn == "yes" or yn == "-y" or yn == "--yes"
+    answer = "y"
+  else
+    answer = "n"
+  end
+  answer
+end
+
+def ask(message, valid_options, yn = "")
   if valid_options
-    answer = get_stdin("#{message} #{valid_options.to_s.gsub(/"/, '').gsub(/, /,'/')} ") while !valid_options.include?(answer)
+    if valid_options.include?("y") and yn_check(yn) == "y"
+      answer = "y"
+    else
+      answer = get_stdin("#{message} #{valid_options.to_s.gsub(/"/, '').gsub(/, /,'/')}: ") while !valid_options.include?(answer)
+    end
   else
     answer = get_stdin(message)
   end
@@ -402,3 +661,109 @@ task :list do
   puts "Tasks: #{(Rake::Task.tasks - [Rake::Task[:list]]).join(', ')}"
   puts "(type rake -T for more detail)\n\n"
 end
+
+def grep_check(word, grep_option, opt)
+  vword=word
+  if word.index("^") == 0
+    vword=word.sub("^", ":")
+  end
+  if opt == 0
+    grep_option = "-A1 -B1 #{grep_option}"
+    comment = "An empty line is required around \\\"#{word}\\\"!"
+  elsif opt == 1
+    grep_option = "-B1 #{grep_option}"
+    comment = "An empty line is required before \\\"#{word}\\\"!"
+  elsif opt == 2
+    grep_option = "-A1 #{grep_option}"
+    comment = "An empty line is required after \\\"#{word}\\\"!"
+  end
+  puts "\nChecking \"#{word}\"...\n\n"
+  ok_failed_stop system("\
+      if grep -H -n -e \"#{word}\" #{grep_option} 2>/dev/null|\
+          grep -v \"#{vword}\";then \
+        printf \"\\\\n\\\\e[31m\";\
+        echo #{comment};\
+        printf \"\\\\e[m\\\\n\";\
+        exit 1;\
+      fi")
+end
+
+desc 'Check source'
+task :check, :opt do |t, args|
+  grep_files = "-r #{source_dir} --include \"*.#{new_post_ext}\""
+  if args.opt == "new"
+    grep_files = "#{source_dir}/#{posts_dir}/*.#{new_post_ext}"
+  end
+  puts "\n## Checking codes..."
+  grep_option = "#{grep_files}|\
+      grep -v \"^--$\"|\
+      grep -v \"#{new_post_ext}-[0-9]\\\+-$\"|\
+      grep -v \"{%\ *raw\ *%}$\""
+
+  grep_check("^{%\ *codeblock", grep_option, 1)
+  #grep_check("^>", grep_option, 0)
+  #grep_check("^#", grep_option, 1)
+  grep_check("^- - -$", grep_option, 1)
+  #grep_check("^<hr>$", grep_option, 1)
+
+  puts "\nChecking words to be avoided...\n\n"
+  ok_failed_stop system("\
+      if [ -f #{word_avoid} ];then \
+        while read a;do \
+          if ret=$(grep -i -q $a #{grep_files} 2>/dev/null);then \
+            echo \"A word $a is included, must be avoided!!!\";\
+            echo $ret;\
+            exit 1;\
+          fi;\
+        done < #{word_avoid};\
+      fi")
+  puts ""
+end
+
+desc 'Send to Superfeedr'
+task :superfeedr do
+  site_config = YAML.load(IO.read('_config.yml'))
+  hub_url = site_config['hub_url']
+  url = site_config['url']
+  if hub_url != nil and hub_url != ""
+    require 'net/http'
+    require 'uri'
+    atom_url = "#{url}/atom.xml"
+    resp, data = Net::HTTP.post_form(URI.parse(hub_url),
+        {'hub.mode' => 'publish',
+        'hub.url' => atom_url})
+    raise "!! Hub notification error: #{resp.code} #{resp.msg}, #{data}" unless resp.code == "204"
+    puts "## Notified hub (" + hub_url + ") that feed #{atom_url} has been updated"
+  end
+end
+
+#-- sending ping --#
+desc "Send ping to Web Search Engines"
+task :ping do
+  if File.exist?(ping_file)
+    require "yaml"
+    require "xmlrpc/client"
+
+    site_config = YAML.load(IO.read('_config.yml'))
+    blog_title = site_config['title']
+    blog_url = site_config['url']
+    ping_url = YAML.load(IO.read('ping.yml'))
+    ping_url.each do |url|
+      ping = XMLRPC::Client.new2(url)
+      begin
+        result = ping.call('weblogUpdates.ping', blog_title, blog_url)
+        puts "#{url} : #{result}"
+      rescue => e
+        puts "#{url} : #{e}"
+      end
+    end
+  end
+end
+
+def ok_failed_stop(condition)
+  if (condition)
+    puts "OK"
+  else
+    raise "FAILD"
+  end
+end
